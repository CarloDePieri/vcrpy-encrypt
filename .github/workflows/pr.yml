---
name: pr

on:

  pull_request:

  workflow_dispatch:
    inputs:
      logLevel:
        description: "Log level"
        required: true
        default: "warning"

jobs:

  checks:
    name: checks
    runs-on: ubuntu-latest

    steps:

      - name: Checkout.
        uses: actions/checkout@v2

      - name: Ensure act has pipx executables in path.
        if: ${{ env.ACT }}
        run: |
          echo "/root/.local/bin" >> $GITHUB_PATH

      - name: Cache dependencies.
        uses: actions/cache@v2
        with:
          path: |
            /opt/pipx_bin/poetry
            /opt/pipx/venvs/poetry
            /opt/pipx_bin/nox
            /opt/pipx/venvs/nox
            .nox/checks
          key: checks-${{ hashFiles('**/poetry.lock') }}-0

      - name: Install poetry and nox if needed.
        run: |
          if ! command -v poetry &> /dev/null
          then
            pipx install poetry
          fi
          if ! command -v nox &> /dev/null
          then
            pipx install nox
          fi

      - name: Install python 3.7, cache poetry packages.
        uses: actions/setup-python@v4
        with:
          python-version: '3.7'

      - name: Run all needed checks.
        run: nox -s checks

#  test:
#    runs-on: ubuntu-latest
#    strategy:
#      fail-fast: false
#      matrix:
#        python-version: [ '3.7', '3.8', '3.9', '3.10']
#    name: test(${{ matrix.python-version }})
#
#    steps:
#
#      - name: Checkout.
#        uses: actions/checkout@v2
#
#      - uses: actions/setup-python@v4
#        with:
#          python-version: ${{ matrix.python-version }}
#          cache: 'poetry'
#
#      - name: Upgrade pip and install nox
#        run: |
#          pip install --upgrade pip
#          pip install nox
#
#      - uses: snok/install-poetry@v1
#        with:
#          version: 1.1.14
#          virtualenvs-create: true
#          virtualenvs-in-project: true
#
#      - name: Run the tests.
#        run: |
#          nox -s env.use -- ${{ matrix.python-version }}
#          nox -s "tests.matrix(${{ matrix.python-version }})"